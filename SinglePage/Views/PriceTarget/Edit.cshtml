@model SinglePage.Models.PriceTarget

@if (!ViewData.ModelState.IsValid)
{
    ViewBag.Title = "Edit_Invalid";
}
else
{
    ViewBag.Title = "Edit";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/shieldui-all.min.js")" type="text/javascript"></script>

    <div class="detail-fields-group">
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.QA_Id)</span>
                @Html.TextBoxFor(model => Model.QA_Id, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.QA_Id)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.AsofDate)</span>
                @Html.EditorFor(model => Model.AsofDate, new { @class = "form-control input-sm form-date" })
            </div>
            @Html.ValidationMessageFor(model => model.AsofDate)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.PT_Period)</span>
                @Html.TextBoxFor(model => Model.PT_Period, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.PT_Period)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.PriceTarget1)</span>
                @Html.TextBoxFor(model => Model.PriceTarget1, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.PriceTarget1)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.DownsidePT)</span>
                @Html.TextBoxFor(model => Model.DownsidePT, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.DownsidePT)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.BullPT)</span>
                @Html.TextBoxFor(model => Model.BullPT, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.BullPT)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.BearPT)</span>
                @Html.TextBoxFor(model => Model.BearPT, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.BearPT)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.CoveredBy)</span>
                @Html.TextBoxFor(model => Model.CoveredBy, new { @class = "form-control input-sm dropdown-analyst" })
            </div>
            @Html.ValidationMessageFor(model => model.CoveredBy)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.PT_Note)</span>
                @Html.TextBoxFor(model => Model.PT_Note, new { @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.PT_Note)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.CreatedOn)</span>
                @Html.EditorFor(model => Model.CreatedOn, new { @readonly = "readonly", @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.CreatedOn)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.CreatedBy)</span>
                @Html.TextBoxFor(model => Model.CreatedBy, new { @readonly = "readonly", @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.CreatedBy)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.ModifiedOn)</span>
                @Html.EditorFor(model => Model.ModifiedOn, new { @readonly="readonly", @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.ModifiedOn)
        </div>
        <div class="detail-field-group">
            <div class="input-group">
                <span class="input-group-addon">@Html.LabelFor(model => Model.ModifiedBy)</span>
                @Html.TextBoxFor(model => Model.ModifiedBy, new { @readonly = "readonly", @class = "form-control input-sm" })
            </div>
            @Html.ValidationMessageFor(model => model.ModifiedBy)
        </div>
    </div>
    <div>
        @Html.Hidden("Id", Model.Id)
        <button type="submit" value="Edit" class="btn btn-default right-align btn_edit_submit">
            <span class="glyphicon glyphicon-floppy-disk"></span><span>&nbsp;Save</span>
        </button>
        <button type="submit" value="Delete" class="btn btn-default left-align btn_delete_submit">
            <span class="glyphicon glyphicon-remove"></span><span>&nbsp;Delete</span>
        </button>
        <!--input class="btn" type="submit" value="Save" /-->
    </div>
